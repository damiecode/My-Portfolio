{"version":3,"sources":["components/sidebar.js","components/home.js","App.js","serviceWorker.js","index.js"],"names":["Sidebar","href","className","data-toggle","data-target","aria-expanded","aria-controls","id","style","backgroundImage","role","data-nav-section","target","rel","Home","data-section","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uOA2CeA,G,UAxCC,kBACd,6BACE,6BACE,yBAAKC,KAAK,UAAUC,UAAU,6CAA6CC,cAAY,WAAWC,cAAY,UAAUC,gBAAc,QAAQC,gBAAc,UAAS,6BACrK,2BAAOC,GAAG,iBAAiBL,UAAU,wBACnC,yBAAKA,UAAU,eACb,yBAAKA,UAAU,aAAaM,MAAO,CAAEC,gBAAiB,2BACtD,wBAAIF,GAAG,iBAAgB,uBAAGN,KAAK,cAAR,iBACvB,0BAAMC,UAAU,SACd,uBAAGA,UAAU,cACZ,IAFH,uBAMF,yBAAKK,GAAG,qBAAqBG,KAAK,aAAaR,UAAU,UACvD,yBAAKK,GAAG,SAASL,UAAU,YACzB,4BACE,wBAAIA,UAAU,UAAS,uBAAGD,KAAK,QAAQU,mBAAiB,QAAjC,iBACvB,4BAAI,uBAAGV,KAAK,SAASU,mBAAiB,SAAlC,UAGJ,4BAAI,uBAAGV,KAAK,YAAYU,mBAAiB,YAArC,gBAIV,yBAAKJ,GAAG,sBACN,4BACE,4BAAI,uBAAGN,KAAK,0CAA0CW,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,qBAC7G,4BAAI,uBAAGD,KAAK,mCAAmCW,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,oBACtG,4BAAI,uBAAGD,KAAK,qCAAqCW,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,qBACxG,4BAAI,uBAAGD,KAAK,yCAAyCW,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,qBAC5G,4BAAI,uBAAGD,KAAK,gCAAgCW,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,kBACnG,4BAAI,uBAAGD,KAAK,+BAA+BW,OAAO,SAASC,IAAI,uBAAsB,uBAAGX,UAAU,2BC0B/FY,EA3DF,kBACX,6BACE,6BAASP,GAAG,gBAAgBL,UAAU,gBAAgBa,eAAa,QACjE,yBAAKb,UAAU,4BACb,wBAAIA,UAAU,UACZ,wBAAIM,MAAO,CAAEC,gBAAiB,6BAC5B,yBAAKP,UAAU,YACf,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wFACb,yBAAKA,UAAU,mCACb,yBAAKA,UAAU,QACb,kCAEE,6BAFF,gBAKA,2BACE,uBAAGA,UAAU,4BAA4BD,KAAK,oGAA9C,cAEE,wBAAIC,UAAU,2BAS9B,wBAAIM,MAAO,CAAEC,gBAAiB,6BAC5B,yBAAKP,UAAU,YACf,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,wFACb,yBAAKA,UAAU,qBACb,yBAAKA,UAAU,QACb,mCAEE,6BAFF,iCAKA,2BACE,uBAAGA,UAAU,4BAA4BD,KAAK,KAA9C,iBAEE,wBAAIC,UAAU,iCCtBzBc,EAfH,kBACV,yBAAKT,GAAG,iBACN,yBAAKA,GAAG,kBACN,kBAAC,EAAD,MACA,yBAAKA,GAAG,iBACN,kBAAC,EAAD,UCFYU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f84620df.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\n\nconst Sidebar = () => (\n  <div>\n    <div>\n      <nav href=\"#navbar\" className=\"js-colorlib-nav-toggle colorlib-nav-toggle\" data-toggle=\"collapse\" data-target=\"#navbar\" aria-expanded=\"false\" aria-controls=\"navbar\"><i /></nav>\n      <aside id=\"colorlib-aside\" className=\"border js-fullheight\">\n        <div className=\"text-center\">\n          <div className=\"author-img\" style={{ backgroundImage: 'url(images/about.jpg)' }} />\n          <h1 id=\"colorlib-logo\"><a href=\"index.html\">Damilola Ale</a></h1>\n          <span className=\"email\">\n            <i className=\"icon-mail\" />\n            {' '}\n            codenlyn@gmail.com\n          </span>\n        </div>\n        <nav id=\"colorlib-main-menu\" role=\"navigation\" className=\"navbar\">\n          <div id=\"navbar\" className=\"collapse\">\n            <ul>\n              <li className=\"active\"><a href=\"#home\" data-nav-section=\"home\">Introduction</a></li>\n              <li><a href=\"#about\" data-nav-section=\"about\">About</a></li>\n              {/* <li><a href=\"#\" data-nav-section=\"projects\">Projects</a></li>\n                  <li><a href=\"#\" data-nav-section=\"blog\">Blog</a></li> */}\n              <li><a href=\"#timeline\" data-nav-section=\"timeline\">Timeline</a></li>\n            </ul>\n          </div>\n        </nav>\n        <nav id=\"colorlib-main-menu\">\n          <ul>\n            <li><a href=\"https://www.facebook.com/dhruv.barochia\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"icon-facebook2\" /></a></li>\n            <li><a href=\"https://twitter.com/iamlildamski\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"icon-twitter2\" /></a></li>\n            <li><a href=\"https://www.instagram.com/dam_eva/\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"icon-instagram\" /></a></li>\n            <li><a href=\"https://www.linkedin.com/in/damiecode/\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"icon-linkedin2\" /></a></li>\n            <li><a href=\"https://github.com/damiecodes\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"icon-github\" /></a></li>\n            <li><a href=\"https://medium.com/@codenlyn\" target=\"_blank\" rel=\"noopener noreferrer\"><i className=\"icon-blogger2\" /></a></li>\n          </ul>\n        </nav>\n      </aside>\n    </div>\n  </div>\n);\n\nexport default Sidebar;\n","import React from 'react';\n\nconst Home = () => (\n  <div>\n    <section id=\"colorlib-hero\" className=\"js-fullheight\" data-section=\"home\">\n      <div className=\"flexslider js-fullheight\">\n        <ul className=\"slides\">\n          <li style={{ backgroundImage: 'url(images/img_bg_1.jpg)' }}>\n            <div className=\"overlay\" />\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-md-6 col-md-offset-3 col-md-pull-3 col-sm-12 col-xs-12 js-fullheight slider-text\">\n                  <div className=\"slider-text-inner js-fullheight\">\n                    <div className=\"desc\">\n                      <h1>\n                        Hi!\n                        <br />\n                        I'm Damilola\n                      </h1>\n                      <p>\n                        <a className=\"btn btn-primary btn-learn\" href=\"https://docs.google.com/document/d/1MhSUx4YpkqyRA6Xb2-5rzBhfKquRTbcTE_s49GrszWc/edit?usp=sharing\">\n                          Download CV\n                          <em className=\"icon-download4\" />\n                        </a>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n          <li style={{ backgroundImage: 'url(images/img_bg_2.jpg)' }}>\n            <div className=\"overlay\" />\n            <div className=\"container-fluid\">\n              <div className=\"row\">\n                <div className=\"col-md-6 col-md-offset-3 col-md-pull-3 col-sm-12 col-xs-12 js-fullheight slider-text\">\n                  <div className=\"slider-text-inner\">\n                    <div className=\"desc\">\n                      <h1>\n                        I am\n                        <br />\n                        a FullStack Software Engineer\n                      </h1>\n                      <p>\n                        <a className=\"btn btn-primary btn-learn\" href=\"#\">\n                          View Portfolio\n                          <em className=\"icon-briefcase3\" />\n                        </a>\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </section>\n  </div>\n);\n\nexport default Home;\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './components/sidebar';\nimport Home from './components/home';\n// import About from './components/about';\n// import Projects from './components/projects';\n// import Blog from './components/blog';\n// import Timeline from './components/timeline';\n\nconst App = () => (\n  <div id=\"colorlib-page\">\n    <div id=\"container-wrap\">\n      <Sidebar />\n      <div id=\"colorlib-main\">\n        <Home />\n        {/* <About />\n            <Projects />\n            <Blog />\n            <Timeline /> */}\n      </div>\n    </div>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}